<!DOCTYPE html><html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>üîÆ Gemini 2.0 Flash Chat</title>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      background: radial-gradient(ellipse at top, #1b1b1b, #0d0d0d);
      color: #ffffff;
      font-family: 'JetBrains Mono', monospace;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    h2 {
      color: #00ffc8;
      text-align: center;
      margin-bottom: 15px;
      font-size: 1.5rem;
    }
    #chatContainer {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
      border: 1px solid #222;
      border-radius: 10px;
      background: #161616;
      box-shadow: 0 0 10px rgba(0,255,200,0.1);
    }
    .message {
      margin-bottom: 15px;
      padding: 12px;
      border-radius: 10px;
      max-width: 80%;
      line-height: 1.5;
      white-space: pre-wrap;
      animation: fadeIn 0.25s ease-in-out;
    }
    .user {
      background: linear-gradient(to right, #00ffc8, #00b894);
      color: #000;
      align-self: flex-end;
    }
    .bot {
      background-color: #1e1e1e;
      border: 1px solid #333;
      align-self: flex-start;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    #inputArea {
      display: flex;
      flex-direction: column;
      margin-top: 15px;
    }
    textarea {
      background-color: #1a1a1a;
      color: #00ffcc;
      font-size: 15px;
      padding: 12px;
      border: 1px solid #444;
      border-radius: 10px;
      resize: none;
      height: 80px;
    }
    button {
      background: linear-gradient(to right, #00ffcc, #00b894);
      color: #000;
      font-weight: bold;
      font-size: 16px;
      padding: 12px;
      border: none;
      border-radius: 10px;
      margin-top: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    button:hover {
      filter: brightness(1.1);
    }
  </style>
</head>
<body>
  <h2>üîÆ Gemini 2.0 Flash - Chat Imersivo</h2>
  <div id="chatContainer"></div>  <div id="inputArea">
    <textarea id="userInput" placeholder="Digite sua pergunta para a IA..."></textarea>
    <button onclick="sendToGemini()">Enviar</button>
  </div>  <script>
    const API_KEY = "AIzaSyDhjnvmgdFLAh1aWMWwL7mhmYzr0KfhQAg";
    const chatContainer = document.getElementById("chatContainer");

    function appendMessage(text, isUser = false) {
      const messageEl = document.createElement("div");
      messageEl.className = `message ${isUser ? "user" : "bot"}`;
      messageEl.innerHTML = formatMarkdown(text);
      chatContainer.appendChild(messageEl);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function formatMarkdown(text) {
      return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/```(.*?)```/gs, '<pre>$1</pre>').replace(/`([^`]+)`/g, '<code>$1</code>')
    .replace(/\n/g, '<br>');
}

async function sendToGemini() {
  const inputEl = document.getElementById("userInput");
  const inputText = inputEl.value.trim();
  if (!inputText) return;

  appendMessage(inputText, true);
  inputEl.value = "";
  appendMessage("‚è≥ Pensando...", false);

  try {
    const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Goog-Api-Key": API_KEY
      },
      body: JSON.stringify({
        contents: [
          {
            role: "user",
            parts: [
              { text: inputText }
            ]
          }
        ]
      })
    });

    const data = await response.json();
    console.log("üîé Resposta bruta da API:", data);

    const lastBot = chatContainer.querySelector(".message.bot:last-child");

    if (data.error) {
      lastBot.innerHTML = "‚ùå Erro da API: " + data.error.message;
      return;
    }

    const candidates = data?.candidates || [];
    const responseText = candidates[0]?.content?.parts?.map(p => p.text).join("\n") || "‚ö†Ô∏è Nenhuma resposta v√°lida recebida.";

    lastBot.innerHTML = formatMarkdown(responseText);
  } catch (err) {
    const lastBot = chatContainer.querySelector(".message.bot:last-child");
    lastBot.textContent = "‚ùå Erro na requisi√ß√£o: " + err.message;
  }
}

  </script>
</body>
</html>
